/* THIS IS HOW RESULT OF SERIALX (Juss) REAL LIFE IMPLEMENTATION MIGHT LOOK LIKE */
/* See also SimpleQuerying.java. !! This file is used for unit tests, do not modify! */

import org.ugp.serialx.json.JsonSerializer => Json; //Importing JsonSerializer and aliasing it as Json!
import org.ugp.serialx.GenericScope; //Importing without aliasing!

name = $TEST_2; //"TEST_XY" variables are not declared in here as you can see, they are expected to be provided by the deserializer!

dependencies = 
{
	//This is scope, the Juss representation of ugp.org.SerialX.Scope!
	//Each scope can have its own variables with values and independant values!
		
	//Every scope can read and write parent scopes variables however by changing them, it will only affect local one and not parents one!
	$name; //"app" ($ obtains value from variable, in this case "app")
	$name = "no longer app lol!"; 
		
	composition-api = "1.0.0 (beta)", //This is one of the variables of this scope...
	bootstrap = "4.5.3",
	version = "2.3.4",
	something = 
	{
		dataStorage = 
		{
			//This is "dataStorage" (stored by variable "dataStorage") sub-scope aka nested skope of its parent scope "something" which is subscope of "dependencies",
			xml = 
			{
				version = "2.8.0"
			},
			yaml = 
			{
				version = "1.10.5"
			},
			josn =
			{
				version = "4.0.0"
			},
			serialx = 
			{
				version = "The best version!";
				$TEST..1 // this one is also provided by deserializer, also this one is a bit tricky...
			}
			totalVersion = "9.9.9"
		},
		ppl = 
		{
			//This is "ppl" (stored by variable "ppl") sub-scope aka nested skope of its parent scope "something" which is subscope of "dependencies".
			//All of these scopes are sub-scopes of "ppl", there can be infinite number of variables and independent values together in one Scope!  
		    {
		    	name: "Vladimir";
		    	age = 37;
		    	residence = "russia";
		    },
		    {
		    	name: "Ivan";
		    	age = 19;
		    	residence = "russia";
		    },
			{
				name: "Firippu";
				age = 103;
				residence = "japan";
			},
		    {
		    	name: "Peter";
		    	age = 17;
		    	residence = "slovak";
		    },
		    {
		    	name: "Lukas";
		    	age = 23;
		    	residence = "usa";
		    },
		    {
		    	name: "Hans";	
		    	age = 51;
		    	residence = "germany";
		    },
		    {
			    name: "Yeager";	
			    age = 17;
			    residence = "germany";
		    },
		    {
		    	name: "Pierre";
		    	age = 44;
		    	residence = "france";
		    }
		}
	},
	"lololoolollool"; //This is independent value of this scope.
},
$srlxVer1 = srlxVer2 = $dependencies.something.dataStorage.serialx.version; //Obtaining value of "serialx" variable in "dependencies" sub-scopes!

something = 
[
	test = "NOPE"
} //Well yea... [} or {] is possible. In 99% cases the interpreter sees these 2 chars as the same one... but it does not mean that you should adopt this convention...

devDependencies = 
{
	//Variables in this scope have nothing to do with variables from "dependencies" because they are in diffrent scope!
	$name = "absolutely not app!";
		
	composition-api = "1.0.0 (alpha)",
	bootstrap = "2.2.3",
	version = "1.2.3",
	something = 
	{
		$version,
		version = "9.9.9",
		$version,
		version = void, //We can use void in order to remove variable entirely
		
		dataStorage = {},
		ppl = {}
	}
	
	nope = $something.test,
	
	$something.dataStorage.xml.version
};
//Setting variable of scope from outer world (possible since 1.3.2)
devDependencies.something.ppl.ludvig = 
{
	age = Math::max {int::valueOf "50"} {Math::pow {Double::valueOf {String::valueOf Math::PI}} 3.55};
	residence = "russia";	
};

//Since 1.2.5 Serializer fully supports Json and JavaScript object!
jsonCrossover = Json {
	/* Yes... $ are not valid values in Json. But in SerialX, Json is the superset of Juss so it is possible. In real usecase you probably want to avoid this! */
	"hello" : $, // As we know, $ is for getting value of the variable however there is no variable name right...? Well actually it is "", the name-less variable. Yea... thats also a thing...
	"jsObject": {
		name: "John",
		age: 31,
		city: "New York"
	},
	"jsonArray": [
		1, 
	    2, 
	    3, 
	    4
	]
},
jsonArrayClass = $jsonCrossover.jsonArray::class;

//Since 1.3.5, generic scopes are supported. They allow ussage of anything as a key not only strings!
genericScope = GenericScope {
	ArrayList 1_0_0e-2 0b10 3d: String 49y 50s 51,
	ArrayList -+-+04 -+-5.000 0x6: {456.000d},
	ArrayList .7 8f +-+-9y: {test: 789L}
}
//But there is no way to read them if they are not string...

//Since SerialX 1.3.5 we can use "from/into API" to load files from external locations!
alienFruit = Json::from "src/examples/implementations/test.json"; //Loading content of external file by using JsonSerializer!
alienPost = Json::from "https://jsonplaceholder.typicode.com/posts/1"; //We can even load files from remote urls (internet connection is required for this)!

//$bullshit <-- No this is not possible, variable "bullshit" cannot be accessed here because it was not initialized yet!
bullshit = 
{
	//This scope cant access variable that is stored by (bullshit), because variable is always created after its value (Scope in this case) is constructed!
    server = "service server",
	build = "service build",
	sql = "service sql";
    
    devDependencies.something.ppl.ludvig.residence = ; //Same as = null
},
$bullshit; //Now we can access variable "bullshit"

$name; //"name" is still "app" in this scope!

arr = {1, 2, 3, 4, 5}; //This is scope with only values! So lets call it... array I guess!
superArr = {$arr, $arr, $arr, $arr::new /*creates clone of arr*/, {1, 2, 3, 4, 5}}; //Yes... this is completely normal and possible in Juss but keep in mind that first, second and third element will refere to same instance in this case!
