/* THIS IS HOW RESULT OF SERIALX (Juss) REAL LIFE IMPLEMENTATION MIGHT LOOK LIKE */

name = "app";

dependencies = 
{
	//This is scope, the Juss representation of ugp.org.SerialX.Scope!
	//Each scope can have its own variables with values and independant values!
		
	//Every scope can read and write parent scopes variables however by changing them, it will only affect local one and not parents one!
	$name; //"app" ($ obtains value from variable, in this case "app")
	$name = "no longer app lol!"; 
		
	composition-api = "1.0.0 (beta)", //This is one of the variables of this scope...
	bootstrap = "4.5.3",
	version = "2.3.4",
	something = 
	{
		dataStorage = 
		{
			//This is "dataStorage" (stored by variable "dataStorage") sub-scope aka nested skope of its parent scope "something" which is subscope of "dependencies",
			xml = 
			{
				version = "2.8.0"
			},
			yaml = 
			{
				version = "1.10.5"
			},
			josn =
			{
				version = "4.0.0"
			},
			serialx = 
			{
				version = "The best version!"
			}
		},
		ppl = 
		{
			//This is "ppl" (stored by variable "ppl") sub-scope aka nested skope of its parent scope "something" which is subscope of "dependencies".
			//All of these scopes are sub-scopes of "ppl", there can be infinite number of variables and independent values together in one Scope!  
		    vladimir = 
		    {
		    	age = 37;
		    	residence = "russia";
		    },
		    ivan = 
		    {
		    	age = 19;
		    	residence = "russia";
		    },
		    filip = 
			{
				age = 17;
				residence = "slovak";
			},
		    peter = 
		    {
		    	age = 17;
		    	residence = "slovak";
		    },
		    lukas = 
		    {
		    	age = 17;
		    	residence = "slovak";
		    },
		    hans = 
		    {
		    	age = 51;
		    	residence = "germany";
		    },
		    pierre = 
		    {
		    	age = 44;
		    	residence = "france";
		    }
		}
	},
	"lololoolollool"; //This is independent value of this scope.
},
$dependencies.something.dataStorage.serialx.version; //Obtaining value of "serialx" variable in "dependencies" sub-scopes!

devDependencies = 
{
	//Variables in this scope have nothing to do with variables from "dependencies" because they are in diffrent scope!
	$name = "absolutely not app!";
		
	composition-api = "1.0.0 (alpha)",
	bootstrap = "2.2.3",
	version = "1.2.3",
	something = 
	{
		dataStorage = {},
		ppl = {}
	}
};
//Setting variable of scope from outer world (possible since 1.3.2)
devDependencies.something.ppl.ludvig = 
{
	age = 60;
	residence = "russia";	
};

//Since 1.2.5 Serializer fully supports Json and JavaScript object!
jsonCrossover = 
{
	"hello" : "Hello world I am Javascript object notation!",
	"jsonObject" : 
	{
		name: "John", 
		age: 31, 
		city: "New York"
	},
	"jsonArray" : [1, 2, 3, 4]
},

//$bullshit <-- No this is not possible, variable "bullshit" cannot be accessed here because it was not initialized yet!
bullshit = 
{
	//This scope cant access variable that is stored by (bullshit), because variable is always created after its value (Scope in this case) is constructed!
    server = "service server",
	build = "service build",
	sql = "service sql";
},
$bullshit; //Now we can access variable "bullshit"

$name; //"name" is still "app" in this scope!

arr = {1, 2, 3, 4, 5}; //This is scope with only values! So lets call it... array I guess!
superArr = {$arr, $arr, $arr, $arr::new /*creates clone of arr*/, {1, 2, 3, 4, 5}}; //Yes... this is completely normal and possible in Juss but keep in mind that first, second and third element will refere to same instance in this case!
